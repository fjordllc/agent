-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.users (
    id UUID PRIMARY KEY,
    role TEXT DEFAULT 'job_seeker',
    email TEXT NOT NULL,
    first_name TEXT,
    last_name TEXT,
    first_name_kana TEXT,
    last_name_kana TEXT,
    date_of_birth DATE,
    CONSTRAINT users_id_fkey FOREIGN KEY (id) REFERENCES auth.users (id) ON DELETE CASCADE
);

ALTER TABLE IF EXISTS public.users OWNER TO postgres;
ALTER TABLE IF EXISTS public.users ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.users TO anon, authenticated, postgres, service_role;

CREATE POLICY "Allow select for all authenticated users" 
ON public.users 
FOR SELECT 
USING (auth.role() = 'authenticated');

CREATE POLICY "Allow update for users themselves" 
ON public.users 
FOR UPDATE 
USING (auth.uid() = id);

CREATE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER 
SET search_path = public
AS $$
BEGIN
  INSERT INTO public.users (id, role, email)
  VALUES (NEW.id, 'admin', NEW.email);
  RETURN NEW;
END;
$$;

CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW 
EXECUTE FUNCTION public.handle_new_user();
